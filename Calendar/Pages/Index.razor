@inject Microsoft.Extensions.Localization.IStringLocalizer<App>   Localized
@inject NavigationManager MyNavigationManager

@inject HttpClient Http
@page "/"

<h3>Your calendar</h3>
<div class="p-1 rounded border-1 ">
    <form class="form-inline">
        <label for="@month" class="  align-content-center">  Month</label>
        <select name="@month" class="form-control mx-1" @bind="month">
            @for (int i = 0; i < 12; i++)
            {
                <option value="@i">@date.AddMonths(i).ToString("MMMM")</option>
            }
        </select>

        <label for="month" class="align-content-center">Year</label>
        <select name="year" class="form-control mx-1" @bind="year">
            @for (int i = date.Year; i < 2031; i++)
            {
                <option vale="@i">@i</option>
            }
        </select>



        <input type="button" class="btn btn-primary mx-2 my-sm-1 align-content-start" value="Display" onclick="@GetCal()" />
    </form>
</div>
<!-- Display calendar-->
<div class="d-none">
    <span>Week begin on @weekDay , @WeekdayName  year =@year, month = @month</span>

</div>


<h3>@Localized["Your Calendar"] <small class="text-primary"> <span> @System.Globalization.DateTimeFormatInfo.CurrentInfo.GetMonthName(month + 1) </span>   <span>@year</span></small></h3>
@*@for (int i = firstdayweek; i <= 7; i++)
    {
        <th> @Enum.GetName(typeof(DayOfWeek), i) </th>
    }*@

@if (list.Count > 0)
{

    <table class="table-bordered table-responsive table-striped table-hover table-sm">
        @*First line*@


        <thead class="bg-primary text-white">
            <tr>


                @for (int i = firstdayweek; i < firstdayweek + 7; i++)
                {
                    <th>
                        @*@calHearder[i]*@
                        @Enum.GetName(typeof(DayOfWeek), i % 7)
                    </th>

                }
            </tr>
        </thead>
        <tr>
            @for (int i = 0; i < weekDay; i++)
            {
                <td> @*@i*@</td>
            }

            @for (int l = weekDay; l < 7; l++)
            {
                if (@list[l - weekDay].date.ToString("d") == DateTime.Now.ToString("d"))
                {
                    <td class="badge-danger">
                        @list[l - weekDay].date.ToString("d")
                        <span class="d-block text-center ">  @list[l - weekDay].yemba</span>
                    </td>


                }
                else
                {
                    <td>
                        @list[l - weekDay].date.ToString("d")
                        <span class="d-block text-center">  @list[l - weekDay].yemba</span>
                    </td>

                }

            }
        </tr>

        @for (int x = 1; x < 6; x++)
        {
            <tr>
                @for (int i = x * 7; i < (x + 1) * 7; i++)
                {


                    @if (i < list.Count + weekDay)
                    {
                        if (@list[i - weekDay].date.ToString("d") == DateTime.Now.ToString("d"))
                        {
                            <td class="badge-danger">
                                <span>
                                    @list[i - weekDay].date.ToString("d")
                                    <span class="d-block text-center">  @list[i - weekDay].yemba</span>
                                </span>
                            </td>
                        }
                        else
                        {
                            <td>
                                <span>
                                    @list[i - weekDay].date.ToString("d")
                                    <span class="d-block text-center">  @list[i - weekDay].yemba</span>
                                </span>
                            </td>
                        }



                    }


                }
            </tr>
        }
    </table>

}
else
{
    <Loading />

}
@code {

    DateTime date = new DateTime(2010, 1, 1);
    int month = DateTime.Now.Month - 1, year = DateTime.Now.Year, weekDay;
    DateTime t = DateTime.Now;
    int firstdayweek = (int)System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
    string WeekdayName = DateTime.Now.DayOfWeek.ToString();
    //List<string> calHearder = new List<string> { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
    List<Calc> ltemp = new List<Calc>();
    List<Calc> trail = new List<Calc>();
    List<Calc> tail = new List<Calc>();
    string   ltp;

    List<Calc> list = new List<Calc>();


    protected override async Task OnInitializedAsync()
    {
        Http.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue  ("application/json"));



        weekDay = (int)new DateTime(year, month, 1).DayOfWeek;
        ;
        //  await LoadCal();
        t = DateTime.Now;
        await LoadCalandar();

    }

    public async Task LoadCal()
    {
        list = new List<Calc>();
        date = new DateTime(year, month, 1);

        DateTime enddate = date.AddMonths(1).AddDays(-1);

        var diff = enddate - date;
        for (int i = 0; i <= diff.TotalDays; i++)
        {
            list.Add(new Calc { date = date.AddDays(i), yemba = "Yemba" });
        }
        weekDay = (int)list[0].date.DayOfWeek;
        WeekdayName = list[0].date.DayOfWeek.ToString();

    }

    public async Task LoadCalandar()
    {


        //ltemp = await Http.GetFromJsonAsync<List<Calc>>("/sample-data/calendar.json");
   //  ltp = await  Http.GetAsync("/calendar.json");
        // ltemp = System.Text.Json.JsonSerializer.DeserializeAsync <List<Calc>>(nop);
        ltemp = await Http .GetFromJsonAsync<List<Calc>>("/calendar.json");


        GetCal();

    }
    public async Task GetCal()
    {
        list = new List<Calc>();

        list = ltemp.Where(y => y.date.Year == year && y.date.Month == month + 1).ToList();
        if (list.Count > 0)
        {
            weekDay = (int)list[0].date.DayOfWeek;
            WeekdayName = list[0].date.DayOfWeek.ToString();
        }

    }
    public class Calc
    {

        public DateTime date { get; set; }
        public string yemba { get; set; }


    }

}
